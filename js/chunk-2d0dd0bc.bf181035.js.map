{"version":3,"sources":["webpack:///./node_modules/@aws-amplify/ui-components/dist/esm-es5/shadow-css-360bb6da.js"],"names":["__webpack_require__","r","__webpack_exports__","d","scopeCss","__spreadArrays","s","i","il","arguments","length","Array","k","a","j","jl","safeSelector","selector","content","placeholders","index","replace","_","keep","replaceBy","push","pseudo","exp","ss","restoreSafeSelector","_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_selectorReSuffix","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","stripComments","input","_commentWithHashRe","extractCommentsWithHash","match","_ruleRe","_curlyRe","OPEN_CURLY","CLOSE_CURLY","BLOCK_PLACEHOLDER","processRules","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","m","_i","suffix","contentPrefix","startsWith","blocks","substring","cssRule","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","join","strEscapedBlocks","insertPolyfillHostInCssText","convertColonRule","cssText","regExp","partReplacer","parts","p","trim","colonHostPartReplacer","host","convertColonHost","colonHostContextPartReplacer","indexOf","convertColonSlotted","slotScopeId","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","convertColonHostContext","convertShadowDOMSelectors","reduce","result","pattern","makeScopeMatcher","scopeSelector","lre","rre","selectorNeedsScoping","re","test","applySimpleSelectorScope","hostSelector","lastIndex","replaceBy_1","before","colon","after","applyStrictSelectorScope","isRe","className","_scopeSelectorPart","scopedP","t","matches","safeContent","res","scopedSelector","startIndex","sep","hasHost","shouldScope","exec","separator","part_1","slice","scopedPart","scopeSelectorText","slotSelector","map","shallowPart","scopeSelectors","commentOriginalSelector","scopeCssText","scopeId","hostScopeId","slotted","slottedSelectors","commentsWithHash","orgSelectors","processCommentedSelector_1","placeholder","comment","scoped","forEach","_a"],"mappings":"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","file":"js/chunk-2d0dd0bc.bf181035.js","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\n/*\n Stencil Client Platform v1.15.0 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = function (selector) {\n    var placeholders = [];\n    var index = 0;\n    var content;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\n        var replaceBy = \"__ph-\" + index + \"__\";\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n        var replaceBy = \"__ph-\" + index + \"__\";\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    var ss = {\n        content: content,\n        placeholders: placeholders,\n    };\n    return ss;\n};\nvar restoreSafeSelector = function (placeholders, content) {\n    return content.replace(/__ph-(\\d+)__/g, function (_, index) { return placeholders[+index]; });\n};\nvar _polyfillHost = '-shadowcsshost';\nvar _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nvar _polyfillHostContext = '-shadowcsscontext';\nvar _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nvar _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nvar _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nvar _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nvar _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar _colonHostRe = /:host/gim;\nvar _colonSlottedRe = /::slotted/gim;\nvar _colonHostContextRe = /:host-context/gim;\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = function (input) {\n    return input.replace(_commentRe, '');\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = function (input) {\n    return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar OPEN_CURLY = '{';\nvar CLOSE_CURLY = '}';\nvar BLOCK_PLACEHOLDER = '%BLOCK%';\nvar processRules = function (input, ruleCallback) {\n    var inputWithEscapedBlocks = escapeBlocks(input);\n    var nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        var selector = m[2];\n        var content = '';\n        var suffix = m[4];\n        var contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        var cssRule = {\n            selector: selector,\n            content: content,\n        };\n        var rule = ruleCallback(cssRule);\n        return \"\" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;\n    });\n};\nvar escapeBlocks = function (input) {\n    var inputParts = input.split(_curlyRe);\n    var resultParts = [];\n    var escapedBlocks = [];\n    var bracketCount = 0;\n    var currentBlockParts = [];\n    for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        var part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    var strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\nvar insertPolyfillHostInCssText = function (selector) {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nvar convertColonRule = function (cssText, regExp, partReplacer) {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        if (m[2]) {\n            var parts = m[2].split(',');\n            var r = [];\n            for (var i = 0; i < parts.length; i++) {\n                var p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nvar colonHostPartReplacer = function (host, part, suffix) {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nvar convertColonHost = function (cssText) {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nvar colonHostContextPartReplacer = function (host, part, suffix) {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nvar convertColonSlotted = function (cssText, slotScopeId) {\n    var slotClass = '.' + slotScopeId + ' > ';\n    var selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        if (m[2]) {\n            var compound = m[2].trim();\n            var suffix = m[3];\n            var slottedSelector = slotClass + compound + suffix;\n            var prefixSelector = '';\n            for (var i = m[4] - 1; i >= 0; i--) {\n                var char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            var orgSelector = prefixSelector + slottedSelector;\n            var addedSelector = \"\" + prefixSelector.trimRight() + slottedSelector.trim();\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                var updatedSelector = addedSelector + \", \" + orgSelector;\n                selectors.push({\n                    orgSelector: orgSelector,\n                    updatedSelector: updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors: selectors,\n        cssText: cssText,\n    };\n};\nvar convertColonHostContext = function (cssText) {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nvar convertShadowDOMSelectors = function (cssText) {\n    return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);\n};\nvar makeScopeMatcher = function (scopeSelector) {\n    var lre = /\\[/g;\n    var rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nvar selectorNeedsScoping = function (selector, scopeSelector) {\n    var re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nvar applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        var replaceBy_1 = \".\" + hostSelector;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, function (_, selector) {\n            return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {\n                return before + replaceBy_1 + colon + after;\n            });\n        })\n            .replace(_polyfillHostRe, replaceBy_1 + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nvar applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {\n    var isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, function (_) {\n        var parts = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            parts[_i - 1] = arguments[_i];\n        }\n        return parts[0];\n    });\n    var className = '.' + scopeSelector;\n    var _scopeSelectorPart = function (p) {\n        var scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            var t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                var matches = t.match(/([^:]*)(:*)(.*)/);\n                if (matches) {\n                    scopedP = matches[1] + className + matches[2] + matches[3];\n                }\n            }\n        }\n        return scopedP;\n    };\n    var safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    var scopedSelector = '';\n    var startIndex = 0;\n    var res;\n    var sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    var shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        var separator = res[1];\n        var part_1 = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part_1.indexOf(_polyfillHostNoCombinator) > -1;\n        var scopedPart = shouldScope ? _scopeSelectorPart(part_1) : part_1;\n        scopedSelector += scopedPart + \" \" + separator + \" \";\n        startIndex = sep.lastIndex;\n    }\n    var part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nvar scopeSelector = function (selector, scopeSelectorText, hostSelector, slotSelector) {\n    return selector\n        .split(',')\n        .map(function (shallowPart) {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nvar scopeSelectors = function (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) {\n    return processRules(cssText, function (rule) {\n        var selector = rule.selector;\n        var content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        var cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content: content,\n        };\n        return cssRule;\n    });\n};\nvar scopeCssText = function (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    var slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, \".\" + hostScopeId);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nvar scopeCss = function (cssText, scopeId, commentOriginalSelector) {\n    var hostScopeId = scopeId + '-h';\n    var slotScopeId = scopeId + '-s';\n    var commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    var orgSelectors = [];\n    if (commentOriginalSelector) {\n        var processCommentedSelector_1 = function (rule) {\n            var placeholder = \"/*!@___\" + orgSelectors.length + \"___*/\";\n            var comment = \"/*!@\" + rule.selector + \"*/\";\n            orgSelectors.push({ placeholder: placeholder, comment: comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, function (rule) {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector_1(rule);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector_1);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    var scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = __spreadArrays([scoped.cssText], commentsWithHash).join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(function (_a) {\n            var placeholder = _a.placeholder, comment = _a.comment;\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach(function (slottedSelector) {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\nexport { scopeCss };\n"],"sourceRoot":""}